/** @jsx React.DOM */

// Stub out the dependencies. These are all filled by stuff in the
// heracles_admin engine.
//= stub lodash
//= stub jquery
//= stub react
//= stub select2
//= stub heracles/admin/components/available_insertables

(function() {

  var FLARUM_HOST = '<%= ENV["FLARUM_HOST"] %>';
  var FLARUM_AUTH_TOKEN = '<%= ENV["FLARUM_AUTH_TOKEN"] %>';

  /**
   * Insertable display class
   * Exists _inside_ the TinyMCE iframe we render for ContentFields
   *
   */

  var InsertableFlarumDiscussionDisplay = React.createClass({

    mixins: [InsertableDisplayMixin],

    render: function() {
      var discussionTitle;
      var discussionURL;
      if (this.state.value.discussion_id) {
        discussionTitle = "#" + this.state.value.discussion_id + " — " + this.state.value.discussion_title;
        discussionURL = "http://" + FLARUM_HOST + "/d/" + this.state.value.discussion_id;
      }
      return (
        <div className="insertable-display insertable-display-flarum" contentEditable="false">
          <div className="insertable-display-flarum__details">
            <div className="insertable-display-flarum__controls">
              <div className="button-group">
                <button className="button insertable-display__edit button button--soft" onClick={this.editValue}>
                  Edit discussion
                </button>
                <button className="button insertable-display__remove button button--soft" onClick={this.remove}>
                  <i className="fa fa-times"/>
                </button>
              </div>
            </div>
            <div className="insertable-display-flarum__content">
              <div className="insertable-display-flarum__pages">
                <dl className="field-details-list">
                  <dt>Embedded discussion</dt>
                  <dd>{(discussionURL) ? <a href={discussionURL} target="_blank">{discussionTitle}</a> : discussionTitle}</dd>
                  <dt>Date</dt>
                  <dd>{moment(this.state.value.discussion_start_time).format("D MMM YYYY")}</dd>
                </dl>
              </div>
              <div className="insertable-display-flarum__meta">
                <dl className="field-details-list">
                  <dt>Title</dt>
                  <dd>{this.state.value.title || "—"}</dd>
                  <dt>Max-height (in pixels)</dt>
                  <dd>{this.state.value.max_height || "—"}</dd>
                </dl>
              </div>
            </div>
          </div>
        </div>
      );
    },

  });


  // A persistent object for caching the API results
  var _resultsCache = [];

  /**
   * Format the discussions results for the Select2
   * @param  {Object} discussion As returned by the Flarum API
   * @return {String}            A string of HTML
   */
  function formatDiscussionResult(discussion) {
    var date = moment(discussion.attributes.startTime).format("D MMM YYYY");
    return (
      "<div class=\"select2-result__primary\">\n  " + discussion.attributes.title + "<div class=\"field-mono\">"+date+"</div>\n</div>"
    )
  }

  /**
   * Format the discussion selection for the Select2
   * @param  {Object} discussion As returned by the Flarum API
   * @return {String}            A string of HTML
   */
  function formatDiscussionSelection(discussion) {
    var date = moment(discussion.attributes.startTime).format("D MMM YYYY");
    return (
      "<div class=\"select2-result__primary\">\n  " + discussion.attributes.title + "&nbsp;<span class=\"field-mono\">"+date+"</span>\n</div>"
    )
  }

  /**
   * Substitute our proxy-path for the URLs generated by Flarums API.
   * @param  {String} url A URL featuring the fully-qualified domain for the Flarum board
   * @return {String}     The substituted URL
   */
  function substituteProxyPath(url) {
    var urlRe = new RegExp("^http://" + FLARUM_HOST);
    // BUG
    // Flarum doesn't include the `/api` portion of this URL
    return url.replace(urlRe, "/flarum/api");
  }

  function findById(array, id) {
    return _.find(array, function(x) { return x.id == id });
  }

  /**
   * Set up the discussion select2 instance
   * This hits up the Flarum API (via a reverse-proxy) to get the latest set.
   * @param  {Element} el          The hidden input element we're binding to
   * @param  {Object} initialValue The initial `state.value` object
   */
  function setupDiscussionSelector(el, initialValue) {
    var _this = this;
    // We store the results in memory so we can access them as full objects.

    $(el).select2({
      allowClear: true,
      placeholder: "Select a discussion",
      minimumResultsForSearch: -1, // Hide the search box

      // Initialise the selection in Select2
      initSelection: function(element, callback) {
        // We don't need to hit the API for these details since we're storing
        // a little bit for display purposes
        callback({
          id: initialValue.discussion_id,
          attributes: {
            title: initialValue.discussion_title,
            startTime: initialValue.discussion_start_time
          }
        })
      },

      // Custom query function to handle the way that the Flarum API does
      // pagination. It uses the jsonapi.org spec for passing the next/prev
      // pages as URLs in the response
      query: function(query) {
        // Clear the cache if we're doing a new search (i.e., the query.context is undefined)
        if (!query.context) {
          _resultsCache = [];
        }
        // We're having to manually adjust the `links` URLs returned by the Flarum API
        var url = (query.context && query.context.next) ? substituteProxyPath(query.context.next) : "/flarum/api/discussions";

        var request = $.ajax({
          beforeSend: function(request) {
            request.setRequestHeader("Authentication", "Token " + FLARUM_AUTH_TOKEN);
          },
          url: url,
          dataType: "json"
        });

        request.done(function(response) {
          // Append to our cache
          _resultsCache = _resultsCache.concat(response.data);

          var results = {
            results: response.data,
            more: !!response.links.next,
            // Return a context object that will be copied into the next query
            context: {
              next: response.links.next
            }
          }
          query.callback(results);
        });
        request.fail(function(response) {
          query.callback({
            hasError: true,
            results: response.data
          });
        });
      },
      // Override default escaping function to leave things un-manipulated
      escapeMarkup: function(m) { return m; },
      formatResult: formatDiscussionResult,
      formatSelection: formatDiscussionSelection
    });
  }


  /**
   * Insertable edit class
   * Rendered into the sidebar
   *
   * Expected `state.value`:
   *    page_ids: []
   *    display_as: "grid/list/"
   *    display_position: "left/right/full-width"
   */

  var InsertableFlarumDiscussionEdit = React.createClass({

    /**
     * Mixin the global-Heracles InsertableEditMixin. This is React's (old)
     * method for sharing common methods and properties between components.
     */
    mixins: [InsertableEditMixin],

    componentDidMount: function() {
      var discussionEl = this.refs.discussion.getDOMNode();
      setupDiscussionSelector(discussionEl, this.state.value);
      $(discussionEl).on("change", this.onDiscussionSelectorChange);
    },

    render: function() {
      return (
        <div className="insertable-edit fields--reversed">
          <form onSubmit={this.onSubmit}>
            <h2 className="insertable-edit__title">Edit insertable discussion</h2>
            <div className="field">
              <div className="field-header">
                <label className="field-label" htmlFor="edit__caption">Discusion</label>
              </div>
              <div className="field-main">
                <input className="field-select2" type="hidden" ref="discussion" defaultValue={this.state.value.discussion_id}/>
              </div>
            </div>
            <div className="field">
              <div className="field-header">
                <label className="field-label" htmlFor="edit__title">Title</label>
              </div>
              <div className="field-main">
                <input ref="title" id="edit__title" className="field-text-input" value={this.state.value.title} onChange={this.handleChange.bind(this, "title")} placeholder="Title"/>
              </div>
            </div>
            <div className="field">
              <div className="field-header">
                <label className="field-label" htmlFor="edit__max_height">Max-height (in pixels)</label>
              </div>
              <div className="field-main">
                <input ref="max_height" id="edit__max_height" className="field-text-input" type="number" value={this.state.value.max_height} onChange={this.handleChange.bind(this, "max_height")} placeholder="Maximum height"/>
              </div>
            </div>
            <button type="submit" className="button button--highlight">Save changes to discussion insertable</button>
          </form>
        </div>
      );
    },

    /**
     * Handle changing data from the form into the `state` object
     * @param  {String} property The property on `state` to change the value of.
     * @param  {Event} e         The event object from React.
     */
    handleChange: function(property, e) {
      var value = _.extend({}, this.state.value);
      value[property] = e.target.value;
      this.setState({value: this.state.value});
    },

    /**
     * Update data when the discussion selector changes
     * We set the `state.value` attribute with the data we care about
     * id, title, and start_time.
     * The ID is the only one that really matters, the reset are just used
     * for making the UI look nice.
     */
    onDiscussionSelectorChange: function(e) {
      var id = e.val;
      var discussion = findById(_resultsCache, id);
      // Set the attributes we care about
      var value = _.extend({}, this.state.value, {
        discussion_id: discussion.id,
        discussion_title: discussion.attributes.title,
        discussion_start_time: discussion.attributes.startTime
      });
      this.setState({value: value});
    }

  });


  /**
   * Register the insertable in the HeraclesAdmin global
   */

  HeraclesAdmin.availableInsertables.add({
    type:    "flarum_discussion",
    label:   "Discussion",
    icon:    "comments",
    display: InsertableFlarumDiscussionDisplay,
    edit:    InsertableFlarumDiscussionEdit
  });

}).call(this);
