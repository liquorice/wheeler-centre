- events = page.events(page: params[:page], per_page: params[:per_page])

= area :masthead_title do
  .page__title.page__title--events Events

= area :masthead_contextual_navigation do
  - pages = [events_page] + events_page.children.in_order.visible.published.where(collection_id: nil)
  = render "partials/masthead_contextual_navigation", pages: pages, current: page

= area :main do
  - cache ["events-archive-1", page, events] do
    .events-archive
      .events-archive__top class=("gradient-bottom-up" unless params[:page].present?)
        .events-archive__header
          h1.events-archive__title
            = page.title
        - if page.fields[:intro].data_present? && !params[:page].present?
          .events-archive__intro.intro.column-wrapper
            .column-narrow.copy
              = render_content page.fields[:intro]
      .column-wrapper
        .column-full
          - if params[:page].present?
            .pagination-top
              = paginate events.results, outer_window: 4
            .pagination-context.pagination-context--top
              ' Page
              = (params[:page] || 1)
              em &nbsp;of&nbsp;
              = events.results.total_pages
          - if events.results.present?
            .snap-wrapper.clearfix data-view-grouper={elementsSelector: ".snap-block", perGroup: { default: 4, "widescreen-wide" => 6, widescreen: 5, tablet: 3, "phone-wide" => 2, phone: 1 }}.to_json
              - events.results.each do |post|
                = render "partials/event_snap_block", post: post, show_type: true
            - if events.results.total_pages > 1
              .pagination-context.pagination-context--bottom
                ' Page
                = (params[:page] || 1)
                em &nbsp;of&nbsp;
                = events.results.total_pages
              .pagination-bottom
                = paginate events.results, outer_window: 4
