- blog_posts = page.blog_posts(page: params[:page], per_page: params[:per_page] || 100)
- recordings = page.recordings(page: params[:page], per_page: params[:per_page] || 100)
- upcoming_events = page.upcoming_events(page: params[:page], per_page: params[:per_page] || 100)
- past_events     = page.past_events(page: params[:page], per_page: params[:per_page] || 100)

/ Custom meta data
- open_graph_image = page.fields[:portrait].asset if page.fields[:portrait].data_present?
- open_graph_summary = strip_html(render_content(page.fields[:intro]) + render_content(page.fields[:body]), "")
- set_meta_tags({ \
    description: open_graph_summary, \
    og: { \
      description: open_graph_summary,
      image: { \
        url: (open_graph_image.content_small_url if open_graph_image), \
        secure_url: (open_graph_image.results[:content_small][:ssl_url] if open_graph_image), \
        width: (open_graph_image.results[:content_small][:meta][:width] if open_graph_image), \
        height: (open_graph_image.results[:content_small][:meta][:height] if open_graph_image), \
      } \
    } \
  })

= area :masthead_title do
  ' People

= area :masthead_contextual_navigation do
  ul.masthead-contextual__navigation-list
      li.masthead-contextual__navigation-item
        a.masthead-contextual__navigation-anchor href="/people"
          ' All people

= area :main do
  .person itemscope=true itemtype="http://data-vocabulary.org/Person"
    .column-wrapper
      .column-wide
        - if page.fields[:portrait].data_present?
          - cache ["person-image-1", page.fields[:portrait].asset] do
            .person__image
              .person__image-inner.clearfix
                img itemprop="photo" src=page.fields[:portrait].asset.content_thumbnail_url alt="Portrait of #{page.title}"
        - cache ["person-title-1", page] do
          h1.person__title itemprop="name"
            == widont_format markdown_line page.title
        .person__bio-and-events.clearfix class="person__bio-and-events--#{upcoming_events.results.total_pages}"
          - cache ["person-bio-1", page] do
            .person__bio
              - if page.fields[:intro].data_present?
                .person__intro
                  = render_content_in_sections page.fields[:intro]
              - if page.fields[:biography].data_present?
                .person__body
                  = render_content_in_sections page.fields[:biography]
              - elsif page.fields[:staff_bio].data_present?
                .person__body
                  = render_content_in_sections page.fields[:staff_bio]

          / Upcoming events
          - if upcoming_events.results.total_pages > 0
            .person__upcoming-events
              .person__upcoming-events-grid.clearfix
                .snap-wrapper.clearfix data-view-grouper={elementsSelector: ".snap-block", perGroup: { default: 2, "widescreen-wide" => 2, tablet: 1, "phone-wide" => 2, phone: 2 }}.to_json
                  - upcoming_events.results.each do |event|
                    = render "partials/event_snap_block", post: event, show_type: true

    / Do a slightly odd dance based on the number of past events for each person
    / If we have between 6 and 4 events ...
    - if past_events.total <= 6 && past_events.total >= 2
      .column-wrapper
        .column-full
          .person__past-events.gradient-top-down
            .section-header
              h2 Past events
            .snap-wrapper.clearfix data-view-grouper={elementsSelector: ".snap-block", perGroup: { default: 4, "widescreen-wide" => 6, widescreen: 5, tablet: 3, "phone-wide" => 3, phone: 2 }}.to_json
              - past_events.results.each do |post|
                = render "partials/event_snap_block", post: post, show_type: true
    / We just split them into three groups and let grouper organise them for us ¯\_(ツ)_/¯
    / Past events and other media types
    - if (past_events.total > 6 || past_events.total < 2) || blog_posts.present?
      .column-wrapper
        .column-mid
          .person__related.clearfix data-view-grouper={elementsSelector: ".person__related-column", perGroup: { default: 2 }}.to_json
            - if blog_posts.present? || past_events.results.total_pages > 0
              / Blog posts
              - if blog_posts.present?
                .person__related-column
                  .person__blog-posts
                    .section-header
                      h2 Notes
                    .person__related-list
                      - blog_posts.each do |blog_post|
                        - cache ["person-blog-post-item-1", blog_post] do
                          .person__related-block
                            a.person__related-anchor href=blog_post.absolute_url
                              .person__related-text
                                h3.person__related-title == markdown_line blog_post.title
                                - if blog_post.fields[:publish_date].data_present?
                                  time.person__related-date= l blog_post.fields[:publish_date].value, format: :medium_date

              / Past events
              - if (past_events.total > 6 || past_events.total < 2) && past_events.results.total_pages > 0
                .person__related-column
                  .person__past-events
                    .section-header
                      h2 Past events
                    .person__related-list
                      - past_events.results.each do |event|
                        - cache ["person-past-event-item-1", event] do
                          .person__related-block
                            a.person__related-anchor href=event.absolute_url
                              .person__related-text
                                h3.person__related-title == markdown_line event.title
                              time.person__related-date = l event.fields[:start_date].value, format: :medium_date
    / Recordings
    - if recordings.present?
      .person__recordings
        .column-wrapper class=("gradient-top-down" if blog_posts.present? || past_events.results.total_pages > 0)
          .section-header
            h2 Recordings
          .column-full
            .snap-wrapper.clearfix data-view-grouper={elementsSelector: ".snap-block", perGroup: { default: 5, "widescreen-wide" => 6, tablet: 4, "phone-wide" => 2, phone: 1 }}.to_json
              - recordings.each do |recording|
                = render "partials/recording_snap_block", post: recording, show_type: true
