- primary_topic = select_primary_topics_for_page(page).first

/ Custom meta data
- open_graph_image = page.fields[:hero_image].asset if page.fields[:hero_image].data_present?
- open_graph_summary = strip_html(render_content(page.fields[:description]), "")
- set_meta_tags({ \
    description: open_graph_summary, \
    og: { \
      description: open_graph_summary,
      image: { \
        url: (open_graph_image.content_medium_url if open_graph_image), \
        secure_url: (open_graph_image.results[:content_medium][:ssl_url] if open_graph_image), \
        width: (open_graph_image.results[:content_medium][:meta][:width] if open_graph_image), \
        height: (open_graph_image.results[:content_medium][:meta][:height] if open_graph_image), \
      } \
    } \
  })

= area :masthead_title do
  - cache ["recording-broadcasts-title-1", broadcasts_page.title] do
    == markdown_line broadcasts_page.title

= area :masthead_contextual_navigation do
  - pages = [broadcasts_page] + broadcasts_page.children.in_order.visible.published.where(collection_id: nil)
  = render "partials/masthead_contextual_navigation", pages: pages, current: page

= area :main do
  .recording
    .recording__header.column-wrapper
      - cache ["recording-header-1", page, primary_topic] do
        .column-wide
          p.recording__byline
            - if primary_topic.present?
              ' In
              a href=primary_topic.absolute_url = primary_topic.title
            - if page.fields[:recording_date].data_present? || primary_topic.present?
              span.blog-post__byline-separator Â·
            - if page.fields[:recording_date].data_present?
              time datetime=l(page.fields[:recording_date].value, format: :rfc_3339)
                ' Recorded on
                = l page.fields[:recording_date].value, format: :day_dmy_with_full_words
          h1.recording__title == widont_format markdown_line page.title
    - cache ["recording-video-1", page] do
      - if page.fields[:youtube_video].data_present?
        .recording__video
          = render "partials/video", external_video: page.fields[:youtube_video], video_poster_image: page.fields[:video_poster_image]
    .column-wrapper
      .column-wide.clearfix
        .recording__description
          - cache ["recording-description-1", page] do
            - if page.fields[:description].data_present?
              = render_content_in_sections page.fields[:description]
          - cache ["recording-description-1", page, page.people] do
            - if page.people.present?
              .recording__presenters
                h2.recording__presenters-header Who?
                - page.people.each do |presenter|
                  = render "partials/presenter_horizontal", presenter: presenter

            / Spit out all the topics
          - cache ["recording-topics-1", page, page.fields[:topics].pages] do
            - if page.fields[:topics].data_present?
              .recording__tags
                h2.recording__tag-header Topics
                ul.recording__tags-list
                  - page.fields[:topics].pages.sort_by(&:title).each do |topic|
                    - cache ["recording-topics-item-1", topic] do
                      li
                        a href=topic.absolute_url = topic.title
          - cache ["recording-socal-icons-1", page, page.title] do
            .recording__sharing
              = render "partials/social_sharing_icons", page: page

        .recording__meta
          - cache ["recording-audio-2", page, page.fields[:audio].asset] do
            - if page.fields[:audio].data_present?
              .recording__audio
                = render "partials/audio", audio: page.fields[:audio], title: "Listen to #{page.title}"
          - cache ["recording-events-1", page.events] do
            - if page.events
              .recording__events
                h2
                  - if page.events.length > 1
                    ' Part of these events
                  - else
                    ' Part of this event
                - page.events.each do |event|
                  = render "partials/event_snap_block", post: event, show_type: true
          - cache ["recording-downloads-1", page.fields[:audio].asset, page.fields[:video].asset] do
            - if page.fields[:audio].data_present? || page.fields[:video].data_present?
              .recording__downloads
                ul
                  - if page.fields[:audio].data_present?
                    - asset = page.fields[:audio].asset
                    - if asset.versions.include?(:audio_mp3)
                      - mp3_tracking_url = track_event(asset.audio_mp3_url, { \
                        title: asset.title || asset.file_name, \
                        event_category: "audio", \
                        event_action: "download" \
                      })
                      li
                        a href=mp3_tracking_url
                          i.fa.fa-music
                          ' Download audio file
                  - if page.fields[:video].data_present?
                    li
                      - asset = page.fields[:video].asset
                      - version = :original
                      - version = :video_ipad_high if asset.versions.include?(:video_ipad_high)
                      - video_tracking_url = track_event(asset.send(:"#{version}_url"), { \
                        title: asset.title || asset.file_name, \
                        event_category: "video", \
                        event_action: "download" \
                      })
                      a href=video_tracking_url
                        i.fa.fa-video-camera
                        ' Download video file
    .column-wrapper
      .column-wide.clearfix


    / Show related events
    - cache ["recording-related-1", page, page.related_recordings] do
      - if page.related_recordings.present?
        .event__related.column-wrapper.gradient-top-down
          .section-header
            h2 Related recordings
          .column-full
            .snap-wrapper.clearfix data-view-grouper={elementsSelector: ".snap-block", perGroup: { default: 4, "widescreen-wide" => 6, tablet: 3, "phone-wide" => 2, phone: 2 }}.to_json
              - page.related_recordings.each do |post|
                = render "partials/recording_snap_block", post: post, show_type: true
