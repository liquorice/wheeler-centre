- primary_topic = select_primary_topics_for_page(page).first

= area :masthead_title do
  ' Broadcasts

= area :masthead_contextual_navigation do
  - pages = [broadcasts_page] + broadcasts_page.children.in_order.visible.published.where(collection_id: nil)
  = render "partials/masthead_contextual_navigation", pages: pages, current: page

= area :main do
  .recording
    .recording__header.column-wrapper
      .column-wide
        p.recording__byline
          - if primary_topic.present?
            ' In
            a href=primary_topic.absolute_url = primary_topic.title
            span.blog-post__byline-separator Â·
            time datetime=l(page.fields[:recording_date].value, format: :rfc_3339)
              = l page.fields[:recording_date].value, format: :day_dmy_with_full_words
        h1.recording__title == widont_format markdown_line page.title
    - if page.fields[:youtube_video].data_present?
      .recording__video
        = render "partials/video", external_video: page.fields[:youtube_video], video_poster_image: page.fields[:video_poster_image]
    .column-wrapper
      .column-wide.clearfix
        .recording__description
          - if page.fields[:description].data_present?
            = render_content_in_sections page.fields[:description]
          - if page.people.present?
            .recording__presenters
              h2.recording__presenters-header Who?
              - page.people.each do |presenter|
                = render "partials/presenter_horizontal", presenter: presenter
          / Spit out all the topics
          - cache ["recording-topics-1", page, page.fields[:topics].pages] do
            - if page.fields[:topics].data_present?
              .recording__tags
                h2.recording__tag-header Topics
                ul.recording__tags-list
                  - page.fields[:topics].pages.sort_by(&:title).each do |topic|
                    - cache ["recording-topics-item-1", topic] do
                      li
                        a href=topic.absolute_url = topic.title
        .recording__meta
          - if page.fields[:audio].data_present?
            .recording__audio
              = render "partials/audio", audio: page.fields[:audio], title: "Listen to #{page.title}"
          - if page.events
            .recording__events
              h2
                - if page.events.length > 1
                  ' Part of these events
                - else
                  ' Part of this event
              - page.events.each do |event|
                = render "partials/event_snap_block", post: event
          - if page.fields[:audio].data_present? || page.fields[:video].data_present?
            .recording__downloads
              ul
                - if page.fields[:audio].data_present?
                  li
                    a href=page.fields[:audio].asset.audio_mp3_url
                      i.fa.fa-music
                      ' Download audio file
                - if page.fields[:video].data_present?
                  li
                    - version = :original
                    - version = :video_ipad_high if page.fields[:video].asset.versions.include?(:video_ipad_high)
                    a href=page.fields[:video].asset.send(:"#{version}_url")
                      i.fa.fa-video-camera
                      ' Download video file
    / Show related events
    - cache ["recording-related-1", page, page.related_recordings] do
      - if page.related_recordings.present?
        .event__related.column-wrapper.gradient-top-down
          .section-header
            h2 Related recordings
          .column-full
            .snap-wrapper.clearfix data-view-grouper={elementsSelector: ".snap-block", perGroup: { default: 4, "widescreen-wide" => 6, tablet: 3, "phone-wide" => 2, phone: 2 }}.to_json
              - page.related_recordings.each do |post|
                = render "partials/recording_snap_block", post: post, show_type: true
