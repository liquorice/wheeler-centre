/ Custom meta data
- open_graph_image = page.fields[:hero_image].asset if page.fields[:hero_image].present?
- open_graph_summary = strip_html(render_content(page.fields[:body]), "")
- if open_graph_image.present?
  - set_meta_tags({ \
      title: page.title, \
      description: open_graph_summary, \
      og: { \
        description: open_graph_summary,
        image: { \
          url: (open_graph_image.content_medium_url if open_graph_image), \
          secure_url: (open_graph_image.results[:content_medium][:ssl_url] if open_graph_image), \
          width: (open_graph_image.results[:content_medium][:meta][:width] if open_graph_image), \
          height: (open_graph_image.results[:content_medium][:meta][:height] if open_graph_image), \
        } \
      } \
    })

- show_all = !!params[:show_all]
- if show_all
  - episodes = page.episodes(page: params[:page], per_page: params[:per_page])
- else
  - episodes = page.episodes

= area :head do
  link href=podcast_tracking_link(page) rel="alternate" title="#{page.title} podcast" type="application/rss+xml"

= area :masthead_title do
  == markdown_line broadcasts_page.title

= area :masthead_contextual_navigation do
  - pages = [broadcasts_page] + broadcasts_page.children.in_order.visible.published.where(collection_id: nil)
  = render "partials/masthead_contextual_navigation", pages: pages, current: page

= area :main do

  .podcast-series
    = render "partials/podcast_series_header"

    = render "partials/podcast_series_subscribe"

    - first_episode = episodes.results.first
    - if !show_all && first_episode.present?
      .podcast-series__latest.column-wrapper
        .column-mid
          .section-header
            h2 Latest episode

          - cache ["podcast-series-audio-1", page, first_episode.fields[:audio].asset] do
            - if first_episode.fields[:audio].data_present?
              .recording__audio.recording__audio-podcast
                = render "partials/audio", audio: first_episode.fields[:audio], title: "Listen to #{first_episode.title}", tracking_event_label: "#{page.title}, #{first_episode.title}"

        - cache ["podcast-series-info-1", page, first_episode] do
          .column-small
            .podcast-series__latest-inner
              - if first_episode.fields[:publish_date].data_present?
                time.podcast-series__latest-date datetime=l(first_episode.fields[:publish_date].value, format: :rfc_3339)
                  = first_episode.fields[:publish_date]
              .podcast-series__latest-title
                a href= first_episode.absolute_url
                  = first_episode.title
                - if first_episode.fields[:explicit].value
                  span.podcast-series__latest-explicit.podcast-series__explicit Explicit
              .podcast-series__latest-description
                = force_excerptify_html render_content(first_episode.fields[:description]), 100, "i em strong br div"

    - if !show_all
      - cache ["podcast-series-older-episodes-1", page, episodes] do
        - if episodes.results.present? && episodes.total > 1
          .podcast-series__older-episodes.column_wrapper
            .column-small
              .section-header
                h2
                  a name= "episode_list" Older episodes

              .podcast-series__episodes-list
                - episodes.results.drop(1).each do |episode|
                  = render "partials/podcast_series_episode", episode: episode


              - if page.episodes.total > 30
                .podcast-series__view-all-wrapper
                  a.podcast-series__view-all href= "#{page.absolute_url}?show_all=true"
                    ' View all episodes from this series

    - elsif show_all
       - cache ["podcast-series-all-episodes-1", page, episodes] do
        .podcast-series__all-episodes.column-wrapper
          .column-small
            .section-header
              h2
                a name= "episode_list" All episodes in this series

            .podcast-series__episodes-list
              - episodes.results.each do |episode|
                = render "partials/podcast_series_episode", episode: episode

            - if episodes.results.total_pages > 1
              .pagination-context.pagination-context--bottom
                ' Page
                = (params[:page] || 1)
                em &nbsp;of&nbsp;
                = episodes.results.total_pages
              .pagination-bottom
                = paginate episodes.results, outer_window: 3


    - if !show_all
       - cache ["podcast-series-about-1", page, page.fields[:description]] do
          - if page.fields[:description].data_present?
            .podcast-series__about.column-wrapper
              .section-header
                h2
                  a name= "about" About this podcast

              = render_content_in_sections page.fields[:description]

    - if !show_all
      - cache ["podcast-series-people-1", page, page.people] do
        - if page.people.present?
          .podcast-series__people.column-wrapper
            .column-mid
              - page.people.each do |person|
                = render "partials/presenter_horizontal", presenter: person



