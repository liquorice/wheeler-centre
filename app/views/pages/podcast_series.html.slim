/ Custom meta data
- open_graph_image = page.fields[:hero_image].assets.first if page.fields[:hero_image].data_present?
- open_graph_summary = strip_html(strip_html(render_content(page.fields[:description]), "p i em strong br span", remove_contents: true), "")

- set_meta_tags({ \
    title: page.title, \
    description: open_graph_summary, \
    og: { \
      title: "Listen â€“ #{page.title}",
      description: open_graph_summary,
    } \
  })

- set_meta_tags({ \
    og: { \
      image: { \
        url: (open_graph_image.content_medium_url if open_graph_image), \
        secure_url: (open_graph_image.processed_asset.data["versions"]["content_medium"].first["ssl_url"] if open_graph_image), \
        width: (open_graph_image.processed_asset.data["versions"]["content_medium"].first["meta"]["width"] if open_graph_image), \
        height: (open_graph_image.processed_asset.data["versions"]["content_medium"].first["meta"]["height"] if open_graph_image), \
      } \
    } \
  })

/ Set twitter:image
- set_meta_tags({ \
    twitter: { \
      image: (open_graph_image.content_medium_url if open_graph_image), \
    } \
  })

- show_all = !!params[:show_all]
- all_episodes = !!params[:all_episodes]
- season_numbers = page.season_numbers
// We explicitly set the first episode here so this isn't overriden when filtering by season
- first_episode = page.episodes.first

- if show_all || all_episodes
  - episodes = page.episodes(page: params[:page], per_page: params[:per_page])
- elsif season_numbers.any? && params[:season].present?
  - episodes = page.episodes_by_season_number(params[:season])
- elsif season_numbers.any?
  - episodes = page.episodes_by_season_number(season_numbers.first)
- else
  - episodes = page.episodes

= area :head do
  link href=podcast_tracking_link(page) rel="alternate" title="#{page.title} podcast" type="application/rss+xml"

= area :masthead_title do
  == markdown_line broadcasts_page.title

= area :masthead_contextual_navigation do
  - pages = [broadcasts_page] + broadcasts_page.children.in_order.visible.published.where(collection_id: nil)
  = render "partials/masthead_contextual_navigation", pages: pages, current: page, with_domain: false

= area :main do
  .podcast-series
    = render "partials/podcast_series_header"
    = render "partials/podcast_series_subscribe"

    // First episode display
    - if !show_all && first_episode.present?
      .podcast-series__latest.column-wrapper
        .column-mid
          .section-header
            h2 Latest episode

          - cache ["podcast-series-audio-1", page, first_episode.fields[:audio].assets.first] do
            - if first_episode.fields[:audio].data_present?
              .recording__audio.recording__audio-podcast
                = render "partials/audio", audio: first_episode.fields[:audio], title: "Listen to #{first_episode.title}", tracking_label: "#{page.title}, #{first_episode.title}"

        - cache ["podcast-series-info-1", page, first_episode] do
          .column-small
            .podcast-series__latest-inner
              - if first_episode.fields[:publish_date].data_present?
                time.podcast-series__latest-date datetime=l(first_episode.fields[:publish_date].value, format: :rfc_3339)
                  = first_episode.fields[:publish_date]
              .podcast-series__latest-title
                a href= first_episode.absolute_url
                  = first_episode.title
                - if first_episode.fields[:explicit].value
                  span.podcast-series__latest-explicit.podcast-series__explicit Explicit
              .podcast-series__latest-description.copy
                = force_excerptify_html render_content(first_episode.fields[:description]), 100, "i em strong br div"

    - if !show_all
      // If the series has season numbers, use the season-based layout
      - if season_numbers.any?
        .podcast-series__seasons.column-wrapper#seasons
          .column-mid
            .section-header
              h2 Seasons

            .podcast-series__seasons-navigation
              ul
                - active_class = "podcast-series__seasons-navigation-anchor--active"
                // We limit the display of seasons to the last 3 so that we don't render an enormous nav
                - season_numbers.take(1).each do |number|
                  li.podcast-series__seasons-navigation-item
                    a.podcast-series__seasons-navigation-anchor href="#{page.absolute_url}#seasons" class=(active_class if !all_episodes && !params[:season].present?)
                      = "Season #{number}"
                    span.podcast-series__seasons-navigation-separator |
                - season_numbers.drop(1).take(2).each do |number|
                  li.podcast-series__seasons-navigation-item
                    a.podcast-series__seasons-navigation-anchor href="#{page.absolute_url}?season=#{number}#seasons" class=(active_class if params[:season].present? && params[:season].to_i == number)
                      = "Season #{number}"
                    span.podcast-series__seasons-navigation-separator |
                li.podcast-series__seasons-navigation-item
                  a.podcast-series__seasons-navigation-anchor href="#{page.absolute_url}?all_episodes=true#seasons" class=(active_class if all_episodes)
                    | All episodes

        - cache ["podcast-series-season-episodes-1", page, episodes] do
          - if episodes.present?
            .podcast-series__older-episodes.column_wrapper
              .column-small
                .podcast-series__episodes-list
                  - episodes.each do |episode|
                    = render "partials/podcast_series_episode", episode: episode

                - if all_episodes && episodes.total_pages > 1
                  .pagination-context.pagination-context--bottom
                    ' Page
                    = (params[:page] || 1)
                    em &nbsp;of&nbsp;
                    = episodes.total_pages
                  .pagination-bottom
                    = paginate episodes, outer_window: 3, params: { anchor: "seasons" }

      // Otherwise use the standard layout
      - else
        - cache ["podcast-series-older-episodes-1", page, episodes] do
          - if episodes.present? && episodes.total_count > 1
            .podcast-series__older-episodes.column_wrapper
              .column-small
                .section-header
                  h2
                    a name= "episode_list" Older episodes

                .podcast-series__episodes-list
                  - episodes.drop(1).each do |episode|
                    = render "partials/podcast_series_episode", episode: episode

                - if page.episodes.total_count > 20
                  .podcast-series__view-all-wrapper
                    a.podcast-series__view-all href= "#{page.absolute_url}?show_all=true"
                      ' View all episodes from this series

    - elsif show_all
       - cache ["podcast-series-all-episodes-1", page, episodes] do
        .podcast-series__all-episodes.column-wrapper
          .column-small
            .section-header
              h2
                a name= "episode_list" All episodes in this series

            .podcast-series__episodes-list
              - episodes.each do |episode|
                = render "partials/podcast_series_episode", episode: episode

            - if episodes.total_pages > 1
              .pagination-context.pagination-context--bottom
                ' Page
                = (params[:page] || 1)
                em &nbsp;of&nbsp;
                = episodes.total_pages
              .pagination-bottom
                = paginate episodes, outer_window: 3


    - if !show_all
       - cache ["podcast-series-about-1", page, page.fields[:description]] do
          - if page.fields[:description].data_present?
            .podcast-series__about.column-wrapper
              .section-header
                h2
                  a name= "about" About this podcast

              = render_content_in_sections page.fields[:description]

    - if !show_all
      - cache ["podcast-series-people-1", page, page.people] do
        - if page.people.present?
          .podcast-series__people.column-wrapper
            .column-mid
              - page.people.each do |person|
                = render "partials/presenter_horizontal", presenter: person
